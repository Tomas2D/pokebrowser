/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ListPokemonFilters: { // input type
    favorite?: boolean | null; // Boolean
    name?: string | null; // String
    offset?: number | null; // Int
    size?: number | null; // Int
    typeId?: number[] | null; // [Int!]
  }
}

export interface NexusGenEnums {
  attackCategory: "fast" | "special"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Attack: { // root type
    category: NexusGenEnums['attackCategory']; // attackCategory!
    damage: number; // Int!
    id: number; // Int!
    name: string; // String!
    type: NexusGenRootTypes['PokemonType']; // PokemonType!
  }
  EvolutionRequirement: { // root type
    amount?: number | null; // Int
    name?: string | null; // String
  }
  Height: { // root type
    maximum: number; // Int!
    minimum: number; // Int!
  }
  ListPokemon: { // root type
    edges: NexusGenRootTypes['Pokemon'][]; // [Pokemon!]!
    meta: NexusGenRootTypes['ListPokemonMeta']; // ListPokemonMeta!
  }
  ListPokemonMeta: { // root type
    hasMore: boolean; // Boolean!
    total: number; // Int!
  }
  Mutation: {};
  Pokemon: { // root type
    attacks: NexusGenRootTypes['Attack'][]; // [Attack!]!
    commonCaptureArea?: string | null; // String
    fleeRate?: number | null; // Float
    id: number; // Int!
    maxCp: number; // Int!
    maxHp: number; // Int!
    name: string; // String!
    nextEvolution?: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    previousEvolution?: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    slug: string; // String!
    types: NexusGenRootTypes['PokemonType'][]; // [PokemonType!]!
    weaknesses: NexusGenRootTypes['PokemonType'][]; // [PokemonType!]!
  }
  PokemonType: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Query: {};
  User: { // root type
    id: string; // String!
  }
  Weight: { // root type
    maximum: number; // Int!
    minimum: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Attack: { // field return type
    category: NexusGenEnums['attackCategory']; // attackCategory!
    damage: number; // Int!
    id: number; // Int!
    name: string; // String!
    type: NexusGenRootTypes['PokemonType']; // PokemonType!
  }
  EvolutionRequirement: { // field return type
    amount: number | null; // Int
    name: string | null; // String
  }
  Height: { // field return type
    maximum: number; // Int!
    minimum: number; // Int!
  }
  ListPokemon: { // field return type
    edges: NexusGenRootTypes['Pokemon'][]; // [Pokemon!]!
    meta: NexusGenRootTypes['ListPokemonMeta']; // ListPokemonMeta!
  }
  ListPokemonMeta: { // field return type
    hasMore: boolean; // Boolean!
    total: number; // Int!
  }
  Mutation: { // field return type
    unVotePokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    votePokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
  }
  Pokemon: { // field return type
    attacks: NexusGenRootTypes['Attack'][]; // [Attack!]!
    classification: string; // String!
    commonCaptureArea: string | null; // String
    evolutionRequirement: NexusGenRootTypes['EvolutionRequirement'] | null; // EvolutionRequirement
    fleeRate: number | null; // Float
    height: NexusGenRootTypes['Height']; // Height!
    id: number; // Int!
    maxCp: number; // Int!
    maxHp: number; // Int!
    name: string; // String!
    nextEvolution: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    previousEvolution: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    resistants: NexusGenRootTypes['PokemonType'][]; // [PokemonType!]!
    slug: string; // String!
    types: NexusGenRootTypes['PokemonType'][]; // [PokemonType!]!
    votesCount: number | null; // Int
    weaknesses: NexusGenRootTypes['PokemonType'][]; // [PokemonType!]!
    weight: NexusGenRootTypes['Weight']; // Weight!
  }
  PokemonType: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  Query: { // field return type
    getPokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    getPokemonBySlug: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    getSelf: NexusGenRootTypes['User'] | null; // User
    getUser: NexusGenRootTypes['User'] | null; // User
    listPokemon: NexusGenRootTypes['ListPokemon']; // ListPokemon!
    listPokemonTypes: NexusGenRootTypes['PokemonType'][]; // [PokemonType!]!
  }
  User: { // field return type
    id: string; // String!
    voteIds: number[]; // [Int!]!
  }
  Weight: { // field return type
    maximum: number; // Int!
    minimum: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Attack: { // field return type name
    category: 'attackCategory'
    damage: 'Int'
    id: 'Int'
    name: 'String'
    type: 'PokemonType'
  }
  EvolutionRequirement: { // field return type name
    amount: 'Int'
    name: 'String'
  }
  Height: { // field return type name
    maximum: 'Int'
    minimum: 'Int'
  }
  ListPokemon: { // field return type name
    edges: 'Pokemon'
    meta: 'ListPokemonMeta'
  }
  ListPokemonMeta: { // field return type name
    hasMore: 'Boolean'
    total: 'Int'
  }
  Mutation: { // field return type name
    unVotePokemon: 'Pokemon'
    votePokemon: 'Pokemon'
  }
  Pokemon: { // field return type name
    attacks: 'Attack'
    classification: 'String'
    commonCaptureArea: 'String'
    evolutionRequirement: 'EvolutionRequirement'
    fleeRate: 'Float'
    height: 'Height'
    id: 'Int'
    maxCp: 'Int'
    maxHp: 'Int'
    name: 'String'
    nextEvolution: 'Pokemon'
    previousEvolution: 'Pokemon'
    resistants: 'PokemonType'
    slug: 'String'
    types: 'PokemonType'
    votesCount: 'Int'
    weaknesses: 'PokemonType'
    weight: 'Weight'
  }
  PokemonType: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Query: { // field return type name
    getPokemon: 'Pokemon'
    getPokemonBySlug: 'Pokemon'
    getSelf: 'User'
    getUser: 'User'
    listPokemon: 'ListPokemon'
    listPokemonTypes: 'PokemonType'
  }
  User: { // field return type name
    id: 'String'
    voteIds: 'Int'
  }
  Weight: { // field return type name
    maximum: 'Int'
    minimum: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    unVotePokemon: { // args
      id: number; // Int!
    }
    votePokemon: { // args
      id: number; // Int!
    }
  }
  Query: {
    getPokemon: { // args
      id: number; // Int!
    }
    getPokemonBySlug: { // args
      slug: string; // String!
    }
    getUser: { // args
      id: string; // String!
    }
    listPokemon: { // args
      filters: NexusGenInputs['ListPokemonFilters']; // ListPokemonFilters!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}